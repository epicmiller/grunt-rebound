define( [], function(){
return (function(){
  var template = (function() {
  return {
    isHTMLBars: true,
    cachedFragment: null,
    build: function build(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("a");
      dom.setAttribute(el1,"class","user-card");
      var el2 = dom.createElement("img");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h3");
      dom.setAttribute(el2,"class","user-name small-text sans-serif");
      var el3 = dom.createTextNode("asdf");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-school x-small-text dark-text");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-goal serif");
      var el3 = dom.createElement("span");
      var el4 = dom.createTextNode("$");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode(" of $");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-tagline x-small-text serif");
      var el3 = dom.createTextNode("\"");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\"");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","user-bar");
      var el3 = dom.createElement("span");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("span");
      dom.appendChild(el0, el1);
      return el0;
    },
    render: function render(context, env, contextualElement) {
      var dom = env.dom;
      var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, content = hooks.content;
      dom.detectNamespace(contextualElement);
      if (this.cachedFragment === null) {
        this.cachedFragment = this.build(dom);
      }
      var fragment = dom.cloneNode(this.cachedFragment, true);
      var element0 = fragment.childNodes[0];
      var element1 = element0.childNodes[0];
      var element2 = element0.childNodes[3];
      var element3 = element0.childNodes[5].childNodes[0];
      var morph0 = dom.createMorphAt(element0.childNodes[1],-1,0);
      var morph1 = dom.createMorphAt(element0.childNodes[2],-1,-1);
      var morph2 = dom.createMorphAt(element2.childNodes[0],0,-1);
      var morph3 = dom.createMorphAt(element2,1,-1);
      var morph4 = dom.createMorphAt(element0.childNodes[4],0,1);
      var morph5 = dom.createMorphAt(element0,6,7);
      var morph6 = dom.createMorphAt(element0,7,8);
      attribute(element0, "href", true, context, ["/profile/",get(context, "user.uid", env)], {}, env);
      attribute(element1, "src", true, context, [get(context, "user.image", env)], {}, env);
      attribute(element1, "alt", true, context, [get(context, "user.name", env)], {}, env);
      content(morph0, "user.name", context, [], {}, {morph:morph0}, env);
      content(morph1, "user.school", context, [], {}, {morph:morph1}, env);
      content(morph2, "user.raised", context, [], {}, {morph:morph2}, env);
      content(morph3, "user.goal", context, [], {}, {morph:morph3}, env);
      content(morph4, "user.tagline", context, [], {}, {morph:morph4}, env);
      attribute(element3, "style", true, context, ["width:",get(context, "user.percent", env)], {}, env);
      content(morph5, "partial", context, ["path/to/partial"], {}, {morph:morph5}, env);
      content(morph6, "partial", context, ["path/to/partial"], {}, {morph:morph6}, env);
      return fragment;
    }
  };
}())
  var script = (function(){ return ({ readyCallback: function(event){ console.log('USER CARD READY'); this.oldValue = this.get('value'); } insertedCallback: function(event){ console.log("INSERTED", this, this.$el); this.set('someValue', this.get('otherValue')); this.$el.focus(); this.$('#awesomeselector'); }, }); })();
  var style = "";
  var component = Rebound.Component.extend(script, { __name: "user-card" });
  var proto = Object.create(HTMLElement.prototype, {});
  proto.createdCallback = function(){
    this.__component__ = new component({template: template, outlet: this, data: Rebound.seedData});
  }
  proto.attachedCallback = function(){script.attachedCallback && script.attachedCallback.call(this.__component__)};
  proto.detachedCallback = function(){
    script.detachedCallback && script.detachedCallback.call(this.__component__);
    this.__component__.deinitialize();
    };
  proto.attributeChangedCallback = function(attrName, oldVal, newVal){
    try{ newVal = JSON.parse(newVal); } catch (e){ newVal = newVal; }
    attrName = attrName.replace(/^data-/g, "").replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
    if(newVal === null){ this.__component__.unset(attrName); }
    else{ this.__component__.set(attrName, newVal, {quiet: true}); }
    script.attributeChangedCallback && script.attributeChangedCallback.call(this.__component__);
  }
  return document.registerElement("user-card", {prototype: proto} );
})();
});