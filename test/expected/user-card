define( [], function(){

  return (function () {
    return window.Rebound.registerComponent("user-card", {
      prototype: (function(){ return ({ readyCallback: function(event){ console.log('USER CARD READY'); this.oldValue = this.get('value'); } insertedCallback: function(event){ console.log("INSERTED", this, this.$el); this.set('someValue', this.get('otherValue')); this.$el.focus(); this.$('#awesomeselector'); }, }); })(),
      template: (function() {
  return {
    isHTMLBars: true,
    blockParams: 0,
    cachedFragment: null,
    hasRendered: false,
    build: function build(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("a");
      dom.setAttribute(el1,"class","user-card");
      var el2 = dom.createElement("img");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h3");
      dom.setAttribute(el2,"class","user-name small-text sans-serif");
      var el3 = dom.createTextNode("asdf");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-school x-small-text dark-text");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-goal serif");
      var el3 = dom.createElement("span");
      var el4 = dom.createTextNode("$");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode(" of $");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      dom.setAttribute(el2,"class","user-tagline x-small-text serif");
      var el3 = dom.createTextNode("\"");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\"");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","user-bar");
      var el3 = dom.createElement("span");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("span");
      dom.appendChild(el0, el1);
      return el0;
    },
    render: function render(context, env, contextualElement) {
      var dom = env.dom;
      var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, content = hooks.content, inline = hooks.inline;
      dom.detectNamespace(contextualElement);
      var fragment;
      if (this.cachedFragment === null) {
        fragment = this.build(dom);
        if (this.hasRendered) {
          this.cachedFragment = fragment;
        } else {
          this.hasRendered = true;
        }
      }
      if (this.cachedFragment) {
        fragment = dom.cloneNode(this.cachedFragment, true);
      }
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [0]);
      var element2 = dom.childAt(element0, [3]);
      var element3 = dom.childAt(element0, [5, 0]);
      var attrMorph0 = dom.createAttrMorph(element0, 'href');
      var attrMorph1 = dom.createAttrMorph(element1, 'src');
      var attrMorph2 = dom.createAttrMorph(element1, 'alt');
      var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,0);
      var morph1 = dom.createMorphAt(dom.childAt(element0, [2]),-1,-1);
      var morph2 = dom.createMorphAt(dom.childAt(element2, [0]),0,-1);
      var morph3 = dom.createMorphAt(element2,1,-1);
      var morph4 = dom.createMorphAt(dom.childAt(element0, [4]),0,1);
      var attrMorph3 = dom.createAttrMorph(element3, 'style');
      var morph5 = dom.createMorphAt(element0,6,7);
      var morph6 = dom.createMorphAt(element0,7,8);
      attribute(env, attrMorph0, element0, "href", concat(env, ["/profile/", get(env, context, "user.uid")]));
      attribute(env, attrMorph1, element1, "src", concat(env, [get(env, context, "user.image")]));
      attribute(env, attrMorph2, element1, "alt", concat(env, [get(env, context, "user.name")]));
      content(env, morph0, context, "user.name");
      content(env, morph1, context, "user.school");
      content(env, morph2, context, "user.raised");
      content(env, morph3, context, "user.goal");
      content(env, morph4, context, "user.tagline");
      attribute(env, attrMorph3, element3, "style", concat(env, ["width:", get(env, context, "user.percent")]));
      inline(env, morph5, context, "partial", ["path/to/partial"], {});
      inline(env, morph6, context, "partial", ["path/to/partial"], {});
      return fragment;
    }
  };
}()),
      style: ""
    });
  })();
});